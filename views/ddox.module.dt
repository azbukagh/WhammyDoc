extends ddox.layout

block ddox.defs
	- import ddox.api;
	- import std.algorithm : canFind;
	- import std.typetuple;

block ddox.title
	- title = "Module " ~ info.mod.qualifiedName;

block ddox.description		
	p!= info.formatDoc(info.mod.docGroup, 2, sec => sec == "$Short")

	|!= info.formatDoc(info.mod.docGroup, 2, sec => sec == "$Long")

block ddox.sections
	section!= info.formatDoc(info.mod.docGroup, 2, sec => !canFind(["License", "Copyright", "Authors", "$Short", "$Long", "Source"], sec))
	
block ddox.members
	- alias TypeTuple!(FunctionDeclaration, InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, TemplateDeclaration) kinds;
	- auto kindnames = ["Functions", "Interfaces", "Classes", "Structs", "Unions", "Enums", "Templates"];
	- auto kindnames_sing = ["Function", "Interface", "Class", "Struct", "Union", "Enum", "Template"];

	- foreach(i, kind; kinds)
		- if(hasChild!kind(info.mod))
			section
				h2= kindnames[i]
				table.table.table-striped
					col.caption
					tr
						th Name
						th Description
					- foreach(grp; getDocGroups!kind(info.mod))
						tr
							td
								a(id="#{grp.name}", class=declStyleClasses(grp), href="#{info.linkTo(grp)}")
									code= grp.name
							td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")

	- alias TypeTuple!(EnumMemberDeclaration, VariableDeclaration, AliasDeclaration) tkinds;
	- auto tkindnames = ["Enum values", "Global variables", "Aliases"];
	- auto tkindnames_sing = ["Enum value", "Variable", "Alias"];

	- foreach(i, kind; tkinds)
		- if(hasChild!kind(info.mod))
			section
				h2 #{tkindnames[i]}
				table.table.table-striped
					col.caption
					tr
						th Name
						th Type
						th Description
					- foreach(f; getDocGroups!kind(info.mod))
						tr
							td
								a(id="#{f.name}", class=declStyleClasses(f), href="#{info.linkTo(f)}")
									code= f.name
							td
								- if(f.type)
									|!= info.formatType(f.type)
							td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")

block wdoc.ainfo
	- if(info.mod.docGroup.comment.hasSection("Authors"))
		section
			h2 Authors
				|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "Authors")
	- if(info.mod.docGroup.comment.hasSection("License"))
		section
			h2 License
				|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "License")
	- if(info.mod.docGroup.comment.hasSection("Copyright"))
		section
			h2 Copyright
				|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "Copyright")

